import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import plotly.graph_objects as go
import plotly.subplots as sp
import os
from sklearn.preprocessing import StandardScaler
import streamlit.components.v1 as components
import requests
from io import StringIO


SALES_68_URL = "https://raw.githubusercontent.com/klopstock-dviz/immo_vis/master/data/ech_annonces_ventes_68.csv"
RENTALS_68_URL = "https://raw.githubusercontent.com/klopstock-dviz/immo_vis/master/data/ech_annonces_locations_68.csv"

@st.cache_data
def load_dataframe(url, index_col, sep=";", nrows=100):
    """Charge un dataframe √† partir d'une URL, le met en cache et le renvoie.

    Parameters
    ----------
    url : str
        URL du fichier CSV
    index_col : str
        Nom de la colonne servant d'index
    sep : str, optional
        Caract√®re de s√©paration, par d√©faut `;`
    nrows : int, optional
        Nombre de lignes √† charger, par d√©faut 100

    Returns
    -------
    pandas.DataFrame
        Le dataframe charg√©, ou None en cas d'erreur
    int
        Le nombre de ligne du dataframe
    """
    response = requests.get(url)
    if response.status_code == 200:
        total_rows = sum(1 for _ in response.iter_lines()) - 1
        csv_data = StringIO(response.text)
        final_nrows = total_rows if nrows == -1 else nrows
        df = pd.read_csv(csv_data, index_col=index_col, sep=sep, nrows=final_nrows)
        return df, total_rows
    else:
        st.error("Erreur lors du chargement des donn√©es")
        return None, None


IMG_FOLDER = "reports/figures/"

st.header("üìä Analyse des donn√©es")

st.write("")

st.subheader("Dataset Ventes 68 :")

# sales_df, nb_rows = load_dataframe(SALES_68_URL, index_col="idannonce", nrows=-1)


# num_cols = sales_df.select_dtypes(include="number").columns
# scaler = StandardScaler()
# scaled_data = scaler.fit_transform(sales_df[num_cols])
# scaled_df = pd.DataFrame(scaled_data, columns=num_cols)


# # Matrice de corr√©lation de certaines variables num√©riques
# fig, ax = plt.subplots(figsize=(10, 5))
# sns.heatmap(
#     sales_df[
#         [
#             "etage",
#             "surface",
#             "surface_terrain",
#             "nb_pieces",
#             "prix_bien",
#             "prix_maison",
#             "prix_terrain",
#             "mensualiteFinance",
#             "balcon",
#             "eau",
#             "bain",
#             "places_parking",
#             "annee_construction",
#             "prix_m2_vente",
#         ]
#     ].corr(),
#     annot=True,
#     cmap="coolwarm",
# )
# plt.title("Corr√©lations entre certaines variables num√©riques")
# st.pyplot(fig)

st.write(
    "On peut noter que la variable 'prix_bien' n'est pas totalement corr√©l√©e avec 'prix_maison' et 'prix_terrain'. \
    √âtant donn√© le grand nombre de valeurs manquantes de ces deux variables, cela n'est pas √©tonnant. \
    Il y a logiquement une forte corr√©lation entre 'prix_bien' et 'surface', mais √©galement avec 'nb_pieces' et 'nb_toilettes', \
    malgr√© pas mal de valeurs manquantes pour cette derni√®re variable. La corr√©lation moyenne de 'prix_bien' avec 'prix_m2_vente' \
    peut √©ventuellement d√©couler d'une forte disparit√© entre les prix de vente et une plus grande homog√©n√©it√© des prix au m2, ou inversement."
)

html_path = "reports/figures/dist_numnorm_ventes_68_box.html"

if os.path.exists(html_path):
    with open(html_path, "r", encoding="utf-8") as f:
        html_content = f.read()
    components.html(html_content, height=600, scrolling=True)
else:
    st.error(f"Le fichier HTML n'a pas √©t√© trouv√© √† l'emplacement : {html_path}")


st.write("---")

# R√©partition des biens selon le type de bien
html_path = "reports/figures/repartition_biens_ventes_68_hist.html"


if os.path.exists(html_path):
    with open(html_path, "r", encoding="utf-8") as f:
        html_content = f.read()
    components.html(html_content, height=600, scrolling=True)
else:
    st.error(f"Le fichier HTML n'a pas √©t√© trouv√© √† l'emplacement : {html_path}")

st.write(
    "On note une quasi √©galit√© dans la r√©partition entre le nombre de maisons (50,25%) et le nombre d'appartements (49,75%).\
    Une grande diff√©rence est √† noter entre les bien anciens, en majorit√©, et les biens neufs, tr√®s peu nombreux (4,65%).\
    Nous pouvons donc nous questionner sur la repr√©sentativit√© de ces derniers pour une pr√©diction pertinente et de qualit√©."
)

st.write("---")


# Distribution des prix de ventes selon le type de bien
html_path = "reports/figures/distribution_ventes_68_box.html"

if os.path.exists(html_path):
    with open(html_path, "r", encoding="utf-8") as f:
        html_content = f.read()
    components.html(html_content, height=600, scrolling=True)
else:
    st.error(f"Le fichier HTML n'a pas √©t√© trouv√© √† l'emplacement : {html_path}")

st.write(
    "On peut noter une forte disparit√© de prix entre maisons et appartements, ainsi qu'entre les biens neufs et anciens. \
    Pour les maisons anciennes, on observe que le premier quartile (248K) est sup√©rieur au troisi√®me quartile des appartements anciens (236K), \
    l√† o√π le prix des maison et appartements neufs sont bien plus ramass√©s, avec un prix bas plus √©lev√© que dans l'ancien et des valeurs hautes n'exc√©dant pas 730K‚Ç¨."
)

st.write("---")

# Distribution des prix au m2 selon le type de bien
html_path = "reports/figures/distribution_ventes_m2_68_box.html"

if os.path.exists(html_path):
    with open(html_path, "r", encoding="utf-8") as f:
        html_content = f.read()
    components.html(html_content, height=600, scrolling=True)
else:
    st.error(f"Le fichier HTML n'a pas √©t√© trouv√© √† l'emplacement : {html_path}")

st.write(
    "On peut noter que contrairement √† la distribution des prix de vente qui se caract√©rise par de fortes disparit√©s entre maisons et appartements, \
    ainsi qu'entre neuf et ancien, la m√©diane du prix de vente au m2 est beaucoup plus homog√®ne (ma = 2676‚Ç¨, mn = 2650‚Ç¨, aa = 2387‚Ç¨), \
    except√©e pour les appartements neufs qui semblent √™tre nettement plus chers que les autres biens (an = 3356‚Ç¨). \
    Les hypoth√®ses qui pourraient expliquer cette diff√©rence pour les appartements neufs sont √† chercher du c√¥t√© des variables de surface, \
    de localisation, de prestations (nb_toilettes, balcon, ascenseur, parking, etc.)"
)

st.write("---")


# Distribution de la surface des biens
html_path = "reports/figures/distribution_surface_vente_68_box.html"

if os.path.exists(html_path):
    with open(html_path, "r", encoding="utf-8") as f:
        html_content = f.read()
    components.html(html_content, height=600, scrolling=True)
else:
    st.error(f"Le fichier HTML n'a pas √©t√© trouv√© √† l'emplacement : {html_path}")

st.markdown(
    """
    On peut constater que lorque nous combinons les m√©dianes des prix au m2 et les m√©dianes des surfaces, \
    nous obtenons des prix de ventes sensiblement sup√©rieurs √† la m√©diane des prix de vente pour les biens, \
    except√© pour les maisons neuves :
    <ul>
        <li> Appartements neufs : 231 564 ‚Ç¨ (225 950 ‚Ç¨)</li>
        <li> Appartements anciens : 171 864 ‚Ç¨ (168 000 ‚Ç¨)</li>
        <li> Maisons neuves : 280 900 ‚Ç¨ (282 427 ‚Ç¨)</li>
        <li> Maisons anciennes : 331 824 ‚Ç¨ (325 000 ‚Ç¨)</li>
        
    </ul>
    """,
    unsafe_allow_html=True,
)

st.write("---")


# √âvolution prix m2 m√©dian
html_path = "reports/figures/evolution_prix_m2_median_68_line.html"

if os.path.exists(html_path):
    with open(html_path, "r", encoding="utf-8") as f:
        html_content = f.read()
    components.html(html_content, height=600, scrolling=True)
else:
    st.error(f"Le fichier HTML n'a pas √©t√© trouv√© √† l'emplacement : {html_path}")

st.markdown(
    """
    On peut noter une indisponibilit√© des donn√©es concernant les ventes de maisons neuves au-del√† de juillet 2020. \
    Une hypoth√®se pourrait √™tre l'irruption du Covid-19 qui aurait stopp√© les livraisons et/ou nouveaux projets de construction.\
    Mais cela n'explique pas pourquoi les donn√©es concernant les ventes d'appartements neufs continuent au-del√† de juillet 2020. \
    Ces donn√©es manquantes pourraient √©ventuellement expliquer le niveau plus √©lev√© du prix au m2 des appartements neufs par rapport \
    aux maisons neuves dans le graphique pr√©c√©dent. On note en effet que les courbes d√©marrent sensiblement au m√™me niveau.\
    √Ä voir comment pallier ce manque de donn√©es.
    """
    )

st.write("---")


# R√©partition des ventes par ann√©e et par type de bien
html_path = "reports/figures/repartition_annee_ventes_68_hist.html"

if os.path.exists(html_path):
    with open(html_path, "r", encoding="utf-8") as f:
        html_content = f.read()
    components.html(html_content, height=600, scrolling=True)
else:
    st.error(f"Le fichier HTML n'a pas √©t√© trouv√© √† l'emplacement : {html_path}")

st.markdown(
    """
    Malgr√© la disponibilit√© de donn√©es pour l'ensemble de l'ann√©e 2019, nous pouvons constater une tr√®s faible activit√© de ventes durant cette ann√©e. \
    Il est possible que les donn√©es de 2019 soient incompl√®tes, ou que la forte demande de biens hors grandes agglom√©rations suite au d√©but \
    de la crise du Covid-19 ait eu un impact sur le march√© immobilier car l'on note une plus forte activit√© de ventes pour les ann√©es suivantes.\
    Il faudrait pouvoir comparer ces donn√©es avec celles de 2018 pour v√©rifier cette hypoth√®se. \
    """
    )

st.write("---")


st.subheader("Dataset Locations 68 :")

# rentals_df, nb_rows = load_dataframe(RENTALS_68_URL, index_col="idannonce", nrows=-1)

# num_cols = rentals_df.select_dtypes(include="number").columns
# scaler = StandardScaler()
# scaled_data = scaler.fit_transform(rentals_df[num_cols])
# scaled_df = pd.DataFrame(scaled_data, columns=num_cols)

# # Matrice de corr√©lation de certaines variables num√©riques
# fig, ax = plt.subplots(figsize=(10, 5))
# sns.heatmap(
#     rentals_df[
#         [
#             "etage",
#             "surface",
#             "surface_terrain",
#             "nb_pieces",
#             "prix_bien",
#             "balcon",
#             "eau",
#             "bain",
#             "places_parking",
#             "annee_construction",
#         ]
#     ].corr(),
#     annot=True,
#     cmap="coolwarm",
# )
# plt.title("Corr√©lations entre certaines variables num√©riques")
# st.pyplot(fig)

# st.write("---")

# Distribution des variables quantitatives
html_path = "reports/figures/dist_numnorm_locations_68_box.html"

if os.path.exists(html_path):
    with open(html_path, "r", encoding="utf-8") as f:
        html_content = f.read()
    components.html(html_content, height=600, scrolling=True)
else:
    st.error(f"Le fichier HTML n'a pas √©t√© trouv√© √† l'emplacement : {html_path}")

st.write("---")


# R√©partition des biens selon le type de bien
html_path = "reports/figures/repartition_biens_rent_68_hist.html"

if os.path.exists(html_path):
    with open(html_path, "r", encoding="utf-8") as f:
        html_content = f.read()
    components.html(html_content, height=600, scrolling=True)
else:
    st.error(f"Le fichier HTML n'a pas √©t√© trouv√© √† l'emplacement : {html_path}")

st.write("---")


# R√©partition des loyers et surfaces selon le type de bien
html_path = "reports/figures/distribution_loyers_surface_locations_68_box.html"

if os.path.exists(html_path):
    with open(html_path, "r", encoding="utf-8") as f:
        html_content = f.read()
    components.html(html_content, height=600, scrolling=True)
else:
    st.error(f"Le fichier HTML n'a pas √©t√© trouv√© √† l'emplacement : {html_path}")

st.write("---")


# √âvolution des loyers m√©dians selon le type de bien
html_path = "reports/figures/evolution_loyers_median_68_line.html"

if os.path.exists(html_path):
    with open(html_path, "r", encoding="utf-8") as f:
        html_content = f.read()
    components.html(html_content, height=600, scrolling=True)
else:
    st.error(f"Le fichier HTML n'a pas √©t√© trouv√© √† l'emplacement : {html_path}")

st.write("---")


# R√©partition des locations par ann√©e selon le type de bien
html_path = "reports/figures/repartition_annee_locations_68_hist.html"

if os.path.exists(html_path):
    with open(html_path, "r", encoding="utf-8") as f:
        html_content = f.read()
    components.html(html_content, height=600, scrolling=True)
else:
    st.error(f"Le fichier HTML n'a pas √©t√© trouv√© √† l'emplacement : {html_path}")

st.write("---")


st.subheader("Dataset Valeurs fonci√®res :")

st.image(f"{IMG_FOLDER}heatmap_data_gouv.jpg", use_container_width=True)

# R√©partition des biens selon le type de bien
html_path = "reports/figures/repartition_biens_dvf_hist.html"

if os.path.exists(html_path):
    with open(html_path, "r", encoding="utf-8") as f:
        html_content = f.read()
    components.html(html_content, height=600, scrolling=True)
else:
    st.error(f"Le fichier HTML n'a pas √©t√© trouv√© √† l'emplacement : {html_path}")

st.write("---")


# R√©partition des type de mutations
html_path = "reports/figures/repartition_mutation_dvf_hist.html"

if os.path.exists(html_path):
    with open(html_path, "r", encoding="utf-8") as f:
        html_content = f.read()
    components.html(html_content, height=600, scrolling=True)
else:
    st.error(f"Le fichier HTML n'a pas √©t√© trouv√© √† l'emplacement : {html_path}")

st.write("---")

st.subheader("Dataset Valeurs fonci√®res :")

# √âvolution des valeurs fonci√®res
html_path = "reports/figures/evol_valeur_dvf_line.html"

if os.path.exists(html_path):
    with open(html_path, "r", encoding="utf-8") as f:
        html_content = f.read()
    components.html(html_content, height=600, scrolling=True)
else:
    st.error(f"Le fichier HTML n'a pas √©t√© trouv√© √† l'emplacement : {html_path}")

st.write("---")

st.image(f"{IMG_FOLDER}repartition_prix_median.jpg", use_container_width=True)
