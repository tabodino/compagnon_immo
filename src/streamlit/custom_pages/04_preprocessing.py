import streamlit as st

st.header("‚öôÔ∏è Preprocessing des donn√©es")

st.info(
    "La phase de pr√©processing a n√©cessit√© plusieurs allers-retours pour ajuster notre m√©thodologie. "
    "Nous avons affin√© le traitement des donn√©es progressivement afin d'obtenir un dataset "
    "le plus propre et le plus coh√©rent possible."
)

st.subheader("Dataset Ventes 68")

st.markdown("#### √âtapes du pr√©processing")

st.write("-  **1. Suppression des colonnes obsol√®tes**")
st.write(
    "Suite aux analyses pr√©c√©dentes, certaines colonnes ont √©t√© supprim√©es car elles n'apportaient pas de valeur ajout√©e."
)
st.write(
    "`['type_annonceur','parking', 'places_parking', "
    "'surface_balcon', 'charges_copro','duree_int',"
    "'loyer_m2_median_n6', 'nb_log_n6', 'taux_rendement_n6',"
    " 'loyer_m2_median_n7', 'nb_log_n7', 'taux_rendement_n7'] `"
)
st.write("-  **2. Gestion des valeurs manquantes (24.41%)**")
st.write(
    "Nous avons d√ª cr√©er de nouvelles cat√©gories pour les variables li√©es au chauffage, "
    "incluant le type, le syst√®me et l'√©nergie utilis√©e."
)
st.write(
    "Pour les variables relatives aux prix et √† l'ann√©e de construction, "
    "nous nous sommes bas√©s sur les valeurs m√©dianes du quartier afin "
    "d'assurer une meilleure coh√©rence des donn√©es."
)
st.write("-  **3. Gestion des types de donn√©es**")
st.write(
    "Nous avons converti les types de donn√©es pour assurer une meilleure compatibilit√© avec les analyses ult√©rieures."
)

st.write("-  **4. Formatage et pr√©paration au merge**")
st.write(
    "Une √©tape de formatage a √©t√© r√©alis√©e pour pr√©parer le dataset √† la fusion avec le dataset des valeurs fonci√®res."
)
st.write("Exemple:")
st.code(
    """
# Cr√©ation d'un ID parcelle hypoth√©tique
# Rapprochement avec le dataset de location qui contient d'autres d√©partements que le 68.
# Exemple pour le d√©partement 69 :

print(dvf_df[dvf_df['code_departement'] == '69']['id_parcelle'].sample(5))

df_formatted['id_parcelle'] = df_formatted[['code_commune', 'TYP_IRIS_y',
    'TYP_IRIS_x', 'UU2010']].astype(str).apply(lambda x: ''.join(x), axis=1)
""",
    language="python",
)

st.write("---")

st.subheader("Dataset Locations 68")

st.write(
    "Toutes les √©tapes de nettoyage et de transformation ont √©t√© r√©alis√©es sur "
    "ce dataset en suivant principalement les √©tapes pr√©sent√©es ci-dessus. "
    "Apr√®s r√©flexion, nous avons finalement d√©cid√© de **ne pas l'inclure** "
    "dans notre analyse."
)

st.write(
    "Ce dataset reste similaire √† 'Ventes 68' et aurait pu √™tre int√©gr√© √† une approche plus large."
)

st.write("---")

st.subheader("Dataset Valeurs fonci√®res")

st.markdown("#### √âtapes du pr√©processing")
st.write("-  **1. Suppression des colonnes obsol√®tes**")
st.code(
    """
['ancien_code_commune', 'ancien_nom_commune',' ancien_id_parcelle', 'numero_volume',
'adresse_suffixe', 'adresse_numero', 'adresse_nom_voie', 'adresse_code_voie']
 """
)
st.write("- **2. Gestion des valeurs manquantes (environ 46%)**")
st.write("Ce jeu de donn√©es pr√©sente un taux important de valeurs manquantes.")
st.write(
    "Il contenait **pr√®s de 400 000 valeurs manquantes** pour la longitude et latitude."
)
st.write(
    "Nous avons utilis√© un fichier regroupant les codes communes et leurs coordonn√©es GPS "
    "√† partir de cette source :"
)
st.write(
    "[üîó CodesPostaux_communesINSEE.csv](https://raw.githubusercontent.com/klopstock-dviz/immo_vis/master/data/codesPostaux_communesINSEE.csv)"
)

st.write("- **3. Conversion des types de donn√©es**")
st.write(
    "La variable `'date_mutation'` a √©t√© convertie au format `datetime` "
    "pour faciliter les analyses temporelles. Des colonnes `ann√©e`, `mois`, `jour` "
    "ont √©t√© cr√©√©es pour permettre une manipulation plus facile des donn√©es."
)


st.markdown("- **4. Gestion des ressources et de la volum√©trie**")
st.write(
    "Le volume du dataset a engendr√© quelques **probl√®mes de ressources computationnelles** et "
    "des lenteurs de traitement, n√©cessitant une optimisation des √©tapes de pr√©processing."
)

st.write("---")

st.subheader("S√©paration des donn√©es")
st.write(
    "La s√©paration des jeux de donn√©es a √©t√© r√©alis√©e selon les objectifs d'analyse :"
)

st.write("**Pr√©diction du prix au m¬≤** :")
st.write(">  - S√©paration **80% entra√Ænement / 20% test**")
st.write("**Pr√©diction de l'√©volution temporelle** :")
st.write(">  - **Donn√©es d'entra√Ænement** : ann√©es **2020 √† 2023**")
st.write(">  - **Donn√©es de test** : ann√©e **2024**")

st.write("---")

st.subheader("Encodage des variables cat√©gorielles")

st.write("La strat√©gie d'encodage d√©pend du nombre de modalit√©s de chaque variable :")

st.markdown("##### Peu de modalit√©s")
st.write("- **One-Hot Encoding** (ex : `'type_local'`, `'nature_mutation'`)")

st.markdown("##### Grand nombre de modalit√©s")
st.write(
    "- **Frequency Encoding** (ex : `'code_nature_culture'`, `'code_nature_culture_speciale'`, `'code_commune'`, `'code_departement'`)"
)

st.markdown("##### Beaucoup de valeurs uniques")
st.write(
    "- **Binary Encoding** (ex : `'code_nature_culture'`, `'code_nature_culture_speciale'`, `'code_commune'`, `'code_departement'`)"
)

st.write("---")

st.subheader("Standardisation des donn√©es")

st.write(
    "Nous avons utilis√© **RobustScaler**, qui est **moins sensible aux valeurs extr√™mes** "
    "et offre une meilleure gestion des outliers que StandardScaler."
)

st.write("---")

st.subheader("Enrichissement des donn√©es")

st.write("Afin d'optimiser nos performances sur les s√©ries temporelles, "
         "nous avons int√©gr√© des donn√©es √©conomiques suppl√©mentaires, "
         "notamment le taux du livret A, le taux d'inflation mensuelle et le "
         "taux moyen des pr√™ts bancaires.")

st.code("""
# Source INSEE
df_inflation = pd.read_csv('../data/raw/inflation-2020-2024.csv', index_col=0)

df_inflation = df_inflation.drop('mois',axis=1)
df_inflation.rename(columns={'index': 'mois'}, inplace=True)
df_inflation.columns = df_inflation.columns.astype(int)
df_inflation["mois"] = df_inflation.index.astype(int)

def get_inflation(row):
    mois = row['mois']
    annee = row['annee']
    try:
        return df_inflation.loc[mois, annee]
    except KeyError:
        return np.nan

df_dep['taux_inflation'] = df_dep.apply(get_inflation, axis=1)

# Source Banque de France
taux_livret_a = {
     2020: 0.50,
     2021: 0.50,
     2022: 1.38,
     2023: 2.50,
     2024: 3.00,
}
taux_moyen_bancaire = {
     2020: 0.48,
     2021: 0.47,
     2022: 0.78,
     2023: 1.37,
     2024: 1.80,
}
df_dep["taux_livret_a"] = df_dep["annee"].map(taux_livret_a)
df_dep["taux_moyen_bancaire"] = df_dep["annee"].map(taux_moyen_bancaire)
""")